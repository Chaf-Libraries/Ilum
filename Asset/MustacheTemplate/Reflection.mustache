{{#Header}}
{{&Include}}
{{/Header}}

namespace Ilum_{{Hash}}
{
RTTR_REGISTRATION
{
    {{#Enum}}
    rttr::registration::enumeration<{{EnumQualifiedName}}>("{{EnumName}}")
    (
        {{#EnumValue}}
        rttr::value("{{EnumValueName}}", {{EnumValueQualifiedName}}){{^IsLast}},{{/IsLast}}
        {{/EnumValue}}  
    );
    {{/Enum}}
    {{#Class}}
    rttr::registration::class_<{{ClassQualifiedName}}>("{{ClassName}}")
    {{#Field}}
        .property("{{FieldName}}", &{{FieldQualifiedName}}){{#Meta}}({{#MetaData}}metadata({{Key}}, {{Value}}){{^IsLast}}, {{/IsLast}}{{/MetaData}}){{/Meta}}
    {{/Field}}
    {{#Constructor}}
        {{^Static}}.constructor<{{#Params}}{{&Param}}{{^IsLast}}, {{/IsLast}}{{/Params}}>(){{/Static}}{{#Static}}.constructor(&{{MethodQualifiedName}}){{/Static}}{{#Meta}}({{#MetaData}}metadata({{Key}}, {{Value}}){{^IsLast}}, {{/IsLast}}{{/MetaData}}){{/Meta}}
    {{/Constructor}}
    {{#Method}}
        .method("{{MethodName}}", {{^Overload}}&{{MethodQualifiedName}}{{/Overload}}{{#Overload}}{{^Const}}rttr::select_overload<{{ReturnType}}({{#Params}}{{&Param}}{{^IsLast}}, {{/IsLast}}{{/Params}})>{{/Const}}{{#Const}}rttr::select_const<{{ClassQualifiedName}}, {{ReturnType}}, {{#Params}}{{&Param}}{{^IsLast}}, {{/IsLast}}{{/Params}}>{{/Const}}(&{{MethodQualifiedName}}){{/Overload}}){{#Meta}}({{#MetaData}}metadata({{Key}}, {{Value}}){{^IsLast}}, {{/IsLast}}{{/MetaData}}){{/Meta}}
    {{/Method}}
    ;
    {{/Class}}
}


}