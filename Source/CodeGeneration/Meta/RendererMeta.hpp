#pragma once
#include <rttr/registration.h>
#include "E:/Workspace/Ilum/Source/Ilum/Renderer/BasePass/CopyPass.hpp"
#include "E:/Workspace/Ilum/Source/Ilum/Renderer/BasePass/DebugPass.hpp"
#include "E:/Workspace/Ilum/Source/Ilum/Renderer/BasePass/PresentPass.hpp"
#include "E:/Workspace/Ilum/Source/Ilum/Renderer/BasePass/TrianglePass.hpp"
#include "E:/Workspace/Ilum/Source/Ilum/Renderer/BasePass/VisibilityBufferPass.hpp"
#include "E:/Workspace/Ilum/Source/Ilum/Renderer/BasePass/VisibilityBufferVisualization.hpp"
#include "E:/Workspace/Ilum/Source/Ilum/Renderer/NRD_CUDA/ReblurBlur.hpp"
#include "E:/Workspace/Ilum/Source/Ilum/Renderer/NRD_CUDA/ReblurHistoryFix.hpp"
#include "E:/Workspace/Ilum/Source/Ilum/Renderer/NRD_CUDA/ReblurPostBlur.hpp"
#include "E:/Workspace/Ilum/Source/Ilum/Renderer/NRD_CUDA/ReblurTemporalAccumulation.hpp"
#include "E:/Workspace/Ilum/Source/Ilum/Renderer/Precompile.hpp"
#include "E:/Workspace/Ilum/Source/Ilum/Renderer/RayTracing/PathTracing.hpp"
#include "E:/Workspace/Ilum/Source/Ilum/Renderer/RayTracing/RayTracingAmbientOcclusion.hpp"
#include "E:/Workspace/Ilum/Source/Ilum/Renderer/RenderPass.hpp"
#include "E:/Workspace/Ilum/Source/Ilum/Renderer/Renderer.hpp"
// This code is generated by meta generator
namespace NAMESPACE_10339470507379107818
{
RTTR_REGISTRATION
{
using namespace Ilum;

rttr::registration::class_<Ilum::CopyPass>("Ilum::CopyPass")(rttr::metadata("RenderPass", "Copy Pass"), rttr::metadata("Category", "Basic Pass"))
	.method("CreateDesc", &Ilum::CopyPass::CreateDesc)
	.method("Create", &Ilum::CopyPass::Create)
	.constructor<>()(rttr::policy::ctor::as_object);

rttr::registration::class_<Ilum::DebugPass>("Ilum::DebugPass")(rttr::metadata("RenderPass", "Debug Pass"), rttr::metadata("Category", "Basic Pass"))
	.method("CreateDesc", &Ilum::DebugPass::CreateDesc)
	.method("Create", &Ilum::DebugPass::Create)
	.constructor<>()(rttr::policy::ctor::as_object);

rttr::registration::class_<Ilum::PresentPass>("Ilum::PresentPass")(rttr::metadata("RenderPass", "Present Pass"), rttr::metadata("Category", "Basic Pass"))
	.method("CreateDesc", &Ilum::PresentPass::CreateDesc)
	.method("Create", &Ilum::PresentPass::Create)
	.constructor<>()(rttr::policy::ctor::as_object);

rttr::registration::class_<Ilum::TrianglePass::Config>("Ilum::TrianglePass::Config")
	.property("a", &Ilum::TrianglePass::Config::a)
	.constructor<>()(rttr::policy::ctor::as_object);

rttr::registration::class_<Ilum::TrianglePass>("Ilum::TrianglePass")(rttr::metadata("RenderPass", "Triangle Pass"), rttr::metadata("Category", "Basic Pass"))
	.method("CreateDesc", &Ilum::TrianglePass::CreateDesc)
	.method("Create", &Ilum::TrianglePass::Create)
	.constructor<>()(rttr::policy::ctor::as_object);

rttr::registration::class_<Ilum::VisibilityBufferPass::Config>("Ilum::VisibilityBufferPass::Config")
	.property("a", &Ilum::VisibilityBufferPass::Config::a)(rttr::metadata("editor", "slider"), rttr::metadata("min", 0), rttr::metadata("max", 100))
	.property("m", &Ilum::VisibilityBufferPass::Config::m)
	.constructor<>()(rttr::policy::ctor::as_object);

rttr::registration::class_<Ilum::VisibilityBufferPass>("Ilum::VisibilityBufferPass")(rttr::metadata("RenderPass", "Visibility Buffer Pass"))
	.method("CreateDesc", &Ilum::VisibilityBufferPass::CreateDesc)
	.method("Create", &Ilum::VisibilityBufferPass::Create)
	.constructor<>()(rttr::policy::ctor::as_object);

rttr::registration::class_<Ilum::VisibilityBufferVisualization>("Ilum::VisibilityBufferVisualization")(rttr::metadata("RenderPass", "Visibility Buffer Visualization"))
	.method("CreateDesc", &Ilum::VisibilityBufferVisualization::CreateDesc)
	.method("Create", &Ilum::VisibilityBufferVisualization::Create)
	.constructor<>()(rttr::policy::ctor::as_object);

rttr::registration::class_<Ilum::ReblurHistoryFix>("Ilum::ReblurHistoryFix")(rttr::metadata("RenderPass", "Reblur History Fix"), rttr::metadata("Category", "Nvidia Ray Tracing Denoisor"))
	.method("CreateDesc", &Ilum::ReblurHistoryFix::CreateDesc)
	.method("Create", &Ilum::ReblurHistoryFix::Create)
	.constructor<>()(rttr::policy::ctor::as_object);

rttr::registration::class_<Ilum::ReblurTemporalAccumulation>("Ilum::ReblurTemporalAccumulation")(rttr::metadata("RenderPass", "Reblur Temporal Accumulation"), rttr::metadata("Category", "Nvidia Ray Tracing Denoisor"))
	.method("CreateDesc", &Ilum::ReblurTemporalAccumulation::CreateDesc)
	.method("Create", &Ilum::ReblurTemporalAccumulation::Create)
	.constructor<>()(rttr::policy::ctor::as_object);

rttr::registration::class_<Ilum::RayTracingAmbientOcclusion>("Ilum::RayTracingAmbientOcclusion")(rttr::metadata("RenderPass", "Ray Tracing Ambient Occlusion"), rttr::metadata("Category", "Ray Tracing"))
	.method("CreateDesc", &Ilum::RayTracingAmbientOcclusion::CreateDesc)
	.method("Create", &Ilum::RayTracingAmbientOcclusion::Create)
	.constructor<>()(rttr::policy::ctor::as_object);

rttr::registration::enumeration<Ilum::DummyTexture>("Ilum::DummyTexture")
(
	rttr::value("WhiteOpaque", Ilum::DummyTexture::WhiteOpaque),
	rttr::value("BlackOpaque", Ilum::DummyTexture::BlackOpaque),
	rttr::value("WhiteTransparent", Ilum::DummyTexture::WhiteTransparent),
	rttr::value("BlackTransparent", Ilum::DummyTexture::BlackTransparent)
);

rttr::registration::class_<Ilum::ViewInfo>("Ilum::ViewInfo")
	.property("view_matrix", &Ilum::ViewInfo::view_matrix)
	.property("projection_matrix", &Ilum::ViewInfo::projection_matrix)
	.property("view_projection_matrix", &Ilum::ViewInfo::view_projection_matrix)
	.property("position", &Ilum::ViewInfo::position)
	.property("frame_count", &Ilum::ViewInfo::frame_count)
	.constructor<>()(rttr::policy::ctor::as_object);

SERIALIZER_REGISTER_TYPE(Ilum::CopyPass)
SERIALIZER_REGISTER_TYPE(Ilum::DebugPass)
SERIALIZER_REGISTER_TYPE(Ilum::PresentPass)
SERIALIZER_REGISTER_TYPE(decltype(Ilum::TrianglePass::Config::a))
SERIALIZER_REGISTER_TYPE(Ilum::TrianglePass::Config)
SERIALIZER_REGISTER_TYPE(Ilum::TrianglePass)
SERIALIZER_REGISTER_TYPE(decltype(Ilum::VisibilityBufferPass::Config::a))
SERIALIZER_REGISTER_TYPE(decltype(Ilum::VisibilityBufferPass::Config::m))
SERIALIZER_REGISTER_TYPE(Ilum::VisibilityBufferPass::Config)
SERIALIZER_REGISTER_TYPE(Ilum::VisibilityBufferPass)
SERIALIZER_REGISTER_TYPE(Ilum::VisibilityBufferVisualization)
SERIALIZER_REGISTER_TYPE(Ilum::ReblurHistoryFix)
SERIALIZER_REGISTER_TYPE(Ilum::ReblurTemporalAccumulation)
SERIALIZER_REGISTER_TYPE(Ilum::RayTracingAmbientOcclusion)
SERIALIZER_REGISTER_TYPE(decltype(Ilum::ViewInfo::view_matrix))
SERIALIZER_REGISTER_TYPE(decltype(Ilum::ViewInfo::projection_matrix))
SERIALIZER_REGISTER_TYPE(decltype(Ilum::ViewInfo::view_projection_matrix))
SERIALIZER_REGISTER_TYPE(decltype(Ilum::ViewInfo::position))
SERIALIZER_REGISTER_TYPE(decltype(Ilum::ViewInfo::frame_count))
SERIALIZER_REGISTER_TYPE(Ilum::ViewInfo)
}
}

//Generate for Serialization

namespace cereal
{
template <class Archive>
void serialize(Archive& archive, Ilum::CopyPass& v)
{
}

template <class Archive>
void serialize(Archive& archive, Ilum::DebugPass& v)
{
}

template <class Archive>
void serialize(Archive& archive, Ilum::PresentPass& v)
{
}

template <class Archive>
void serialize(Archive& archive, Ilum::TrianglePass::Config& v)
{
	archive(v.a);
}

template <class Archive>
void serialize(Archive& archive, Ilum::TrianglePass& v)
{
}

template <class Archive>
void serialize(Archive& archive, Ilum::VisibilityBufferPass::Config& v)
{
	archive(v.a, v.m);
}

template <class Archive>
void serialize(Archive& archive, Ilum::VisibilityBufferPass& v)
{
}

template <class Archive>
void serialize(Archive& archive, Ilum::VisibilityBufferVisualization& v)
{
}

template <class Archive>
void serialize(Archive& archive, Ilum::ReblurHistoryFix& v)
{
}

template <class Archive>
void serialize(Archive& archive, Ilum::ReblurTemporalAccumulation& v)
{
}

template <class Archive>
void serialize(Archive& archive, Ilum::RayTracingAmbientOcclusion& v)
{
}

template <class Archive>
void serialize(Archive& archive, Ilum::ViewInfo& v)
{
	archive(v.view_matrix, v.projection_matrix, v.view_projection_matrix, v.position, v.frame_count);
}


}
