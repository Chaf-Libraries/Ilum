#version 450

#extension GL_KHR_vulkan_glsl : enable

#include "../GlobalFunction.glsl"

#define LOCAL_SIZE 8

#define SAMPLE_COUNT 4096

#define LUT_SIZE 516

layout(local_size_x = LOCAL_SIZE, local_size_y = LOCAL_SIZE, local_size_z = 1) in;

layout(set = 0, binding = 0, rg16f) uniform image2D BRDFPreIntegrate;

vec3 ImportanceSampleGGX(vec2 Xi, vec3 N, float roughness)
{
    float alpha = roughness * roughness;

    float theta = atan(alpha * sqrt(Xi.x) / sqrt(1 - Xi.x));
    float phi = 2.0 * PI * Xi.y;

    vec3 H = vec3(
        sin(theta)*cos(phi), 
        sin(theta)*sin(phi), 
        cos(theta)
    );

    vec3 Up = N.z > 0.99? vec3(0.0, 1.0, 0.0) : vec3(0.0, 0.0, 1.0);
    vec3 T = normalize(cross(N, Up));
    vec3 B = normalize(cross(N, T));

    return T * H.x+B * H.y+N * H.z;
}

float GeometrySchlickGGX(float NoV, float roughness)
{
    float alpha = roughness;
    float k = alpha * alpha / 2.0;

    return NoV / (NoV*(1.0 - k) + k);
}

float GeometrySmith(float roughness, float NoV, float NoL)
{
    return GeometrySchlickGGX(NoV, roughness) * GeometrySchlickGGX(NoL, roughness);
}

vec2 IntegrateBRDF(float NoV, float roughness)
{
    vec3 V;
    V.x = sqrt(1.0 - NoV * NoV);
    V.y = 0.0;
    V.z = NoV;

    float A = 0.0;
    float B = 0.0;

    vec3 N = vec3(0.0, 0.0, 1.0);

    for(uint i = 0; i < SAMPLE_COUNT; i++)
    {
        vec2 Xi = Hammersley(i, SAMPLE_COUNT);
        vec3 H = ImportanceSampleGGX(Xi, N, roughness);
        vec3 L = normalize(H * 2.0 * dot(V, H) - V);

        float NoL = clamp(dot(N, L), 0.0, 1.0);
        float NoH = clamp(dot(N, H), 0.0, 1.0);
        float VoH = clamp(dot(V, H), 0.0, 1.0);

        if(NoL > 0.0)
        {
            float G = GeometrySmith(roughness, NoV, NoL);
            float w = VoH * G / (NoV * NoH);
            float Fc = pow(1.0 - VoH, 5.0);

            A += (1.0 - Fc) * w;
            B += Fc * w;
        }
    }

    return vec2(A, B) / float(SAMPLE_COUNT);
}

void main()
{
    vec2 tex_coord = vec2(gl_GlobalInvocationID.xy + vec2(0.5)) / float(LUT_SIZE);
    vec2 brdf = IntegrateBRDF(tex_coord.x, tex_coord.y);
    imageStore(BRDFPreIntegrate, ivec2(gl_GlobalInvocationID.xy), vec4(brdf, 0.0, 0.0));
}