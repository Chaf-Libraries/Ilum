#version 450

layout (local_size_x = 32, local_size_y = 32) in;

layout(binding = 0) uniform sampler2D input_image;
layout(binding = 1, rgba16f) writeonly uniform image2D output_image;

layout(push_constant) uniform PushBlock{
    uvec2 extent;
	float scale;
	float strength;
	uint horizental;
}push_data;

void main()
{
    if(all(lessThan(gl_GlobalInvocationID.xy, push_data.extent)))
    {
        float weights[5];
        weights[0] = 0.227027;
        weights[1] = 0.1945946;
        weights[2] = 0.1216216;
        weights[3] = 0.054054;
        weights[4] = 0.016216;

        vec2 uv = vec2((gl_GlobalInvocationID.xy + 0.5) / vec2(push_data.extent));

        vec2 tex_offset = 1.0 / vec2(push_data.extent) * push_data.scale; // gets size of single texel
        vec3 result = texture(input_image, uv).rgb * weights[0]; // current fragment's contribution
        for(int i = 1; i < 5; ++i)
        {
            if (push_data.horizental == 1)
            {
                // H
                result += texture(input_image, uv + vec2(tex_offset.x * i, 0.0)).rgb * weights[i] * push_data.strength;
                result += texture(input_image, uv - vec2(tex_offset.x * i, 0.0)).rgb * weights[i] * push_data.strength;
            }
            else
            {
                // V
                result += texture(input_image, uv + vec2(0.0, tex_offset.y * i)).rgb * weights[i] * push_data.strength;
                result += texture(input_image, uv - vec2(0.0, tex_offset.y * i)).rgb * weights[i] * push_data.strength;
            }
        }
        
        imageStore(output_image, ivec2(gl_GlobalInvocationID.xy), vec4(result, 1.0));
    }
}