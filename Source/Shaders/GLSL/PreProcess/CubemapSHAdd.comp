#version 460


#extension GL_GOOGLE_include_directive: enable

#define SH_INTERMEDIATE_SIZE 1024 / 8
#define CUBEMAP_FACE_NUM 6

layout(local_size_x = 1, local_size_y = SH_INTERMEDIATE_SIZE, local_size_z = CUBEMAP_FACE_NUM) in;

layout(set = 0, binding = 0, rgba16f) uniform image2D IrradianceSH;
layout(set = 0, binding = 1) uniform sampler2DArray SHIntermediate;

shared vec3 shared_sh_coeffs[SH_INTERMEDIATE_SIZE][CUBEMAP_FACE_NUM];
shared float shared_weights[SH_INTERMEDIATE_SIZE][CUBEMAP_FACE_NUM];

const float PI = 3.1415926535;

void main()
{
	shared_sh_coeffs[gl_GlobalInvocationID.y][gl_GlobalInvocationID.z] = vec3(0.0);
	shared_weights[gl_GlobalInvocationID.y][gl_GlobalInvocationID.z] = 0.0;

	barrier();

	for(uint i = 0; i < SH_INTERMEDIATE_SIZE; i++)
	{
		ivec3 p = ivec3(gl_GlobalInvocationID.x * SH_INTERMEDIATE_SIZE + i, gl_GlobalInvocationID.y, gl_GlobalInvocationID.z);
		vec4 val = texelFetch(SHIntermediate, p, 0);

		shared_sh_coeffs[gl_GlobalInvocationID.y][gl_GlobalInvocationID.z] += val.rgb;
		shared_weights[gl_GlobalInvocationID.y][gl_GlobalInvocationID.z] += val.a;
	}

	barrier();

	if(gl_GlobalInvocationID.z == 0)
	{
		for(uint i = 1; i < CUBEMAP_FACE_NUM; i++)
		{
			shared_sh_coeffs[gl_GlobalInvocationID.y][0] += shared_sh_coeffs[gl_GlobalInvocationID.y][i];
			shared_weights[gl_GlobalInvocationID.y][0] += shared_weights[gl_GlobalInvocationID.y][i];
		}
	}

	barrier();

	if(gl_GlobalInvocationID.y == 0 && gl_GlobalInvocationID.z == 0)
	{
		for(uint i = 0; i < SH_INTERMEDIATE_SIZE; i++)
		{
			shared_sh_coeffs[0][0] += shared_sh_coeffs[i][0];
			shared_weights[0][0] += shared_weights[i][0];
		}

		float scale = (4.0 * PI) / shared_weights[0][0];

		imageStore(IrradianceSH, ivec2(gl_GlobalInvocationID.x, 0), vec4(shared_sh_coeffs[0][0] * scale, shared_weights[0][0]));
	}
}