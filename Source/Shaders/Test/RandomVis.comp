#version 450

#extension GL_KHR_vulkan_glsl : enable

#include "../Random.glsl"
#include "../Sampling.glsl"

layout (local_size_x = 1, local_size_y = 1) in;

layout (binding = 0, rgba8) writeonly uniform image2D RandomVis;

layout(push_constant) uniform PushBlock{
    uvec2 extent;
    uint frame;
    int sample_count;
    int method;
}push_data;

void main()
{
    vec2 uv = vec2(gl_GlobalInvocationID.xy);

    uint seed = init_random(push_data.extent, gl_GlobalInvocationID.xy, push_data.frame);

    if(push_data.method == 0)
    {
        for(int i = 0; i < push_data.sample_count; i++)
        {
            vec2 rng = rand2(seed);
            imageStore(RandomVis, ivec2(rng * vec2(push_data.extent)), vec4(1.0));
        }
    }
    else if(push_data.method == 1)
    {
        uint nx, ny;
        nx = ny = uint(sqrt(push_data.sample_count));

        for(uint x = 0; x < nx; x++)
        {
            for(uint y = 0; y < ny; y++)
            {
                vec2 rng = stratified_sample2d(seed, true, nx, ny, x, y);
                imageStore(RandomVis, ivec2(rng * vec2(push_data.extent)), vec4(1.0));
            }
        }
    }
    else if(push_data.method == 2)
    {
        for(uint i = 0; i < push_data.sample_count; i++)
        {
            imageStore(RandomVis, ivec2(vec2(halton2(i), halton5(i)) * vec2(push_data.extent)), vec4(1.0));
        }
    }
}